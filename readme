Readme

Distribution of Work
**********************************************************
Jacob Lopez was responsible for developing the cache data structure
including some of it's methods. Elmi Moallin was responsible for 
allowing the program to properly read the trace file, command line
parameters, and interpretting the trace files accordingly (such
as converting the hexadecimal strings into binary strings). We 
both had to work together to debug the code and to determine under
which conditions certain fields should be incremented.
 
Simulation Data
**********************************************************
256 4 16 write-allocate write-back fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 314171
Load misses: 4026
Store hits: 188047
Store misses: 9439
Total cycles: 5596074

256 4 16 write-allocate write-back lru < gcc.trace
<pre>Total loads: 318197
Total stores: 197486
Load hits: 314798
Load misses: 3399
Store hits: 188250
Store misses: 9236
Total cycles: 5078274

256 4 16 write-allocate write-through fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 314171
Load misses: 4026
Store hits: 188047
Store misses: 9439
Total cycles: 23773174

256 4 16 write-allocate write-through lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 314798
Load misses: 3399
Store hits: 188250
Store misses: 9236
Total cycles: 23502074

256 4 16 no-write-allocate write-back fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 311017
Load misses: 7180
Store hits: 163705
Store misses: 33781
Total cycles: 7967793

256 4 16 no-write-allocate write-back lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 311613
Load misses: 6584
Store hits: 164819
Store misses: 32667
Total cycles: 7457507

256 4 16 no-write-allocate write-through fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 311017
Load misses: 7180
Store hits: 163705
Store misses: 33781
Total cycles: 24057093

256 4 16 no-write-allocate write-through lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 311613
Load misses: 6584
Store hits: 164819
Store misses: 32667
Total cycles: 23819807

8192 128 16 write-allocate write-back fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 315855
Load misses: 2342
Store hits: 188617
Store misses: 8869
Total cycles: 4180874

8192 128 16 write-allocate write-back lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 315855
Load misses: 2342
Store hits: 188617
Store misses: 8869
Total cycles: 4180874

8192 128 16 write-allocate write-through fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 315855
Load misses: 2342
Store hits: 188617
Store misses: 8869
Total cycles: 23042574

8192 128 16 write-allocate write-through lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 315855
Load misses: 2342
Store hits: 188617
Store misses: 8869
Total cycles: 23042574

8192 128 16 no-write-allocate write-back fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 312207
Load misses: 5990
Store hits: 165216
Store misses: 32270
Total cycles: 7061004

8192 128 16 no-write-allocate write-back lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 312207
Load misses: 5990
Store hits: 165216
Store misses: 32270
Total cycles: 7061004

8192 128 16 no-write-allocate write-through fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 312207
Load misses: 5990
Store hits: 165216
Store misses: 32270
Total cycles: 23582604

8192 128 16 no-write-allocate write-through lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 312207
Load misses: 5990
Store hits: 165216
Store misses: 32270
Total cycles: 23582604

8192 512 16 write-allocate write-back fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 315855
Load misses: 2342
Store hits: 188617
Store misses: 8869
Total cycles: 4180874

8192 512 16 write-allocate write-back lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 315855
Load misses: 2342
Store hits: 188617
Store misses: 8869
Total cycles: 4180874

8192 512 16 write-allocate write-through fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 315855
Load misses: 2342
Store hits: 188617
Store misses: 8869
Total cycles: 23042574

8192 512 16 write-allocate write-through lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 315855
Load misses: 2342
Store hits: 188617
Store misses: 8869
Total cycles: 23042574

8192 512 16 no-write-allocate write-back fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 312207
Load misses: 5990
Store hits: 165216
Store misses: 32270
Total cycles: 7061004

8192 512 16 no-write-allocate write-back lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 312207
Load misses: 5990
Store hits: 165216
Store misses: 32270
Total cycles: 7061004

8192 512 16 no-write-allocate write-through fifo < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 312207
Load misses: 5990
Store hits: 165216
Store misses: 32270
Total cycles: 23582604

8192 512 16 no-write-allocate write-through lru < gcc.trace
Total loads: 318197
Total stores: 197486
Load hits: 312207
Load misses: 5990
Store hits: 165216
Store misses: 32270
Total cycles: 23582604

Best Cache Settings
**********************************************************
We considered all possible combination of settings over three different memory structures 
(distributions of amount of sets, set sizes, and block sizes) and found that the two best
settings were write-allocate write-back lru and write-allocate write-back fifo as they 
produce the least amount of cycles. We note that lru does not increase the amount of 
cycles but does organize the cache in such a way such that it will favor pieces of 
information that are used more frequently and therefore we think that write-allocate 
write-back lru is the best setting. The absolute best trial ran was 8192 128 16 write-allocate 
write-back lru which performed equally well as some of its most expensive counterparts such
as 8192 512 16 write-allocate write-back lru.

